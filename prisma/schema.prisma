generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String   @id @default(uuid())
  username        String   @unique
  email           String   @unique
  isEmailVerified Boolean  @default(false) @map("is_email_verified")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  credentials       Credentials[]
  verifyEmailTokens VerifyEmailTokens[]
  movies            Movies[]

  @@map("users")
}

model Credentials {
  id          String       @id @default(uuid())
  userId      String       @map("user_id")
  user        Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider    AuthProvider
  accessToken String       @map("access_token")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  @@unique([userId, provider])
  @@map("credentials")
}

model VerifyEmailTokens {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("verify_email_tokens")
}

enum AuthProvider {
  EMAIL
}

model Movies {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  user           Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String
  publishingYear Int      @map("publishing_year")
  poster         String
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("movies")
}
